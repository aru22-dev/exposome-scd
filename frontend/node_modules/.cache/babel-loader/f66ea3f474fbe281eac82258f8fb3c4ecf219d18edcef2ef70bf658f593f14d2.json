{"ast":null,"code":"var _jsxFileName = \"/Users/arundhatiraj/Documents/Github Projects/exposome-scd/src/components/QuestionInputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Button from '../ui/Button';\nimport Card from '../ui/Card';\nimport CardContent from '../ui/CardContent';\nimport Input from '../ui/Input';\nimport Label from '../ui/Label';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionInputForm = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    type: '',\n    id: '',\n    name: '',\n    description: '',\n    storyType: '',\n    optionA: '',\n    optionB: '',\n    optionC: '',\n    result: ''\n  });\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async () => {\n    await fetch('/api/add-question', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    });\n    alert('Question added successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center min-h-screen bg-gray-100\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"p-10 rounded-2xl shadow-xl\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold mb-4\",\n          children: \"Add Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), Object.keys(formData).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: key,\n            value: formData[key],\n            onChange: handleChange,\n            placeholder: `Enter ${key}`,\n            className: \"w-full p-2 border rounded-lg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit,\n          className: \"w-full mt-4\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionInputForm, \"0+Xgw4UI2qAdsj2MRg/LvFG9ZCA=\");\n_c = QuestionInputForm;\nexport default QuestionInputForm;\nvar _c;\n$RefreshReg$(_c, \"QuestionInputForm\");","map":{"version":3,"names":["React","useState","Button","Card","CardContent","Input","Label","jsxDEV","_jsxDEV","QuestionInputForm","_s","formData","setFormData","type","id","name","description","storyType","optionA","optionB","optionC","result","handleChange","e","target","value","handleSubmit","fetch","method","headers","body","JSON","stringify","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","key","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/arundhatiraj/Documents/Github Projects/exposome-scd/src/components/QuestionInputForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Button from '../ui/Button';\nimport Card from '../ui/Card';\nimport CardContent from '../ui/CardContent';\nimport Input from '../ui/Input';\nimport Label from '../ui/Label';\n\nconst QuestionInputForm = () => {\n    const [formData, setFormData] = useState({\n        type: '',\n        id: '',\n        name: '',\n        description: '',\n        storyType: '',\n        optionA: '',\n        optionB: '',\n        optionC: '',\n        result: ''\n    });\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = async () => {\n        await fetch('/api/add-question', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        });\n        alert('Question added successfully!');\n    };\n\n    return (\n        <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\n            <Card className=\"p-10 rounded-2xl shadow-xl\">\n                <CardContent className=\"space-y-4\">\n                    <h1 className=\"text-3xl font-bold mb-4\">Add Question</h1>\n                    {Object.keys(formData).map((key) => (\n                        <div key={key} className=\"space-y-1\">\n                            <Label>{key}</Label>\n                            <Input\n                                name={key}\n                                value={formData[key]}\n                                onChange={handleChange}\n                                placeholder={`Enter ${key}`}\n                                className=\"w-full p-2 border rounded-lg\"\n                            />\n                        </div>\n                    ))}\n                    <Button onClick={handleSubmit} className=\"w-full mt-4\">Submit</Button>\n                </CardContent>\n            </Card>\n        </div>\n    );\n};\n\nexport default QuestionInputForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}